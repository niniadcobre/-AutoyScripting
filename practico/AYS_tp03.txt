----------------------------------
TP03 - Automatización y scripting 
Estructuras de control; funciones; 
expresiones aritméticas; ejecución 
de comandos; ordenes internas
FAI - TUASSL  
----------------------------------

MANUAL DE REFERENCIA: "BEGINNING LINUX PROGRAMMING"
---------------------------------------------------
NOTA1: Los temas cubiertos en este práctico incluyen los
desarrollados en las páginas 34 a 58 y, 68 a 70 del 
manual de referencia. 

NOTA2: Cuando los ejercicios pidan modificar código, repita
el bloque a continuación del original y haga las modificaciones.  

NOTA3: Cada vez que modifique el código VERIFIQUE su correcto 
funcionamiento.  

EJERCITACIÓN:
---------------------------------
1. ¿Qué es una orden simple y una orden compuesta para bash?

2. ¿Cómo obtiene ayuda para saber cómo interpretar o escribir 
una sentencia if, for, while, until, case o una función? Escriba 
a continuación la sintaxis y _sólo la sintaxis_ de cada una de las
estructuras de control mencionadas.  

Ejemplo: 
if: if ÓRDENES; then ÓRDENES; [ elif ÓRDENES; then ÓRDENES; ]...[ else ÓRDENES; ] fi

3. Lea el script a continuación y complete los incisos listados: 
 a)Indique qué hace el script línea a línea y de manera general.  
   Agregue como comentario al inicio la funcionalidad general. 
 b)Reemplace el ciclo for con un while. 
 c)Investigue el uso de la orden interna ':'. ¿En qué lugar podría utilizarla? 
   ¿Se obtiene algún beneficio con el cambio? 
 d)Modifique el script tal que exista una función que retorne el valor de los
   procesos para un usuario recibido como argumento. 
 e)Modifique el script tal que todos los usuarios se evalúen para el mismo 
   instante de tiempo. 
 f)Modifique el script tal que se muestre el total de procesos para cada 
   instante, evaluado como suma de lo calculado para cada usuario. 
 g) Reemplace el uso de `` por su equivalente. 
 

#Inicio
#####################
#!/bin/bash

declare -i procs 
declare -r logfile=/tmp/users.log
echo COMIENZO > $logfile

while true; do
     for i in `cut -f1 -d:  /etc/passwd`;do 
	  procs=`ps -u ${i} --no-headers |wc -l`
	  if [[ $procs -ne 0 ]];then 
	    echo ${i}: $procs
	  fi 
     done | sort -n -k2  
     date
     sleep 30
done >> $logfile

exit 0
# Fin del script


4. Lea el script a continuación y complete los incisos listados: 
 a)Indique qué hace el script línea a línea y de manera general. Ver
   página 71 del manual de referencia para explicar la sentencia 'cp'. 
   ¿En qué sección del capítulo 2 se encuentra la tabla?  
   Agregue como comentario al inicio la funcionalidad general. 
 b)Reemplace el ciclo until con un while y en otra versión con for.
   En el caso de for, ¿es exactamente el mismo comportamiento? 
 c)¿Podría cambiar la sentencia `ls *jpg` del for por una más
   eficiente?¿Cuál es la diferencia?
 d)Modifique el script para que guarde las nuevas versiones de los 
   archivos en un subdirectorio llamado JPG dentro del directorio de 
   trabajo actual. ¿Qué política asume si el directorio JPG ya se
   encuentra creado? Verifique el comportamiento del script en esta 
   situación. 
 d)Modifique el script tal que exista una función que verifique si el 
   usuario es root y, en ese caso, pregunte al usuario si desea continuar
   con la ejecución del script. Caso contrario, deberá terminar la 
   ejecución. 
 e) Reemplace el uso de `` por su equivalente. 

#Inicio
#####################
#!/bin/bash
[[ `id -u` -ne 0 ]] || exit

until [[ $# -eq 0 ]]; do
   if [[ -d $1 ]];then 
      cd $1
      for i in `ls *jpg`;do
	cp $i ${i%%jpg}JPG
      done
      cd $OLDPWD
      shift 
   fi 
done 
# Fin del script

5. Lea el script a continuación y complete los incisos listados: 
 a)Indique qué hace el script línea a línea y de manera general.  
   Agregue como comentario al inicio la funcionalidad general. 
 b)Modifique la función buscarscript tal que: 
	* Reemplace el while con for. Lea la sección "Tuberías"  
        de man bash. Explique el impacto de la localidad de la 
        variable 'a' dentro del while. ¿Puede observar su valor
        fuera del while?¿Qué sucede al reemplazarla por un for?
	* Además del listado de scripts encontrados, retorne un 
        valor entero con el total scripts encontrados. 
  c)Modifique el script para que se emita al final del listado,
    el total de scripts encontrados. 
  d)En el caso de no proveer argumentos, critique y mejore la 
    sección de código entre los comentarios ###Mejorar. 
  e)Reescriba el while en el elif sin usar redirección (<). 
    ¿Cambia la localidad de la variable pkg en la versión 
    modificada? 
  f)En la sentencia else de la estructura de control principal, 
    reescriba el while utilizando for y until. ¿Qué sucede con la 
    localidad de la variable pkg en cada caso? ¿Qué sucede con 
    los parámetros posicionales en cada caso?
  g) Reemplace el uso de `` por su equivalente. 


#Inicio
#####################
#!/bin/bash 

declare -u resp

function buscarscript(){
local a
   
   if ! dpkg -l $1 &> /dev/null; then
     echo "$1 no instalado"
     return 
   fi
   echo $1 
   dpkg -L $1 | while read archivo; do
      a=`file "$archivo"|grep "Bourne-Again"|cut -f1 -d:`
      if [[ -n "$a" ]];then  echo "    $a";fi 
   done   
}

if [[ $# -eq 0 ]];then 
   ###Mejorar
   echo -n "Se creará un listado para todos los paquetes instalados en el sistema, ¿esta de acuerdo? S/N "
   read resp 
   if [[ "$resp" == "N" ]];then 
	echo "Saliendo..." 
	exit 1 
   elif [[ "$resp" != "S" ]];then 
	echo "Respuesta inválida, saliendo..."
        exit 2
   fi 
   ###Mejorar
   #Crear listado para todos los paquetes del sistema 
   dpkg -l |awk '$1=="ii" {print $2}'|while read pkg; do
      buscarscript $pkg 
   done 
elif [[ -f "$1" ]];then
   # Si el primer argumento es un archivo regular, se asume que contiene una
   #lista de nombres de paquetes separada por nueva linea, sin lineas vacías. 
   while read pkg;do
      buscarscript $pkg 
   done < $1 
else
   #Asume que los argumentos son un listado de nombres de paquetes
   while [[ $# -gt 0 ]];do
	buscarscript $1
	shift
   done 
fi 
# Fin del script
  
6. Lea el script a continuación y complete los incisos listados: 
 a)Indique qué hace el script línea a línea y de manera general.  
   Agregue como comentario al inicio la funcionalidad general. 
 b)Utilizando la estructura de control más apropiada, modifique la función 
   calificar tal que: 
	* Si la nota es 0 se devuelva REPROBADO
  	* Si la nota está entre 1 y 3 se devuelva INSUFICIENTE
	* Si la nota es 4 se devuelva APROBADO
	* Si la nota está entre 5 y 7 se devuelva BUENO 
	* Si la nota está entre 8 y 9 se devuelva MUY BUENO 
	* Si la nota es 10 se devuelva EXCELENTE 
 	* EN cualquier otro caso se devuelve "NOTA INVALIDA"
 c)Crear una nueva función que realice la función de ingreso de 
   datos. La misma deberá verificar que la nota se encuentre en 
   el rango 0-10. ¿Qué puede decir acerca de las verificaciones 
   en el inciso anterior, en relación a esta verificación?
 d)¿Qué otra función podría agregar?
 e)Explique claramente el funcionamiento de la sentencia "break 2". 
   Reemplace el if que lo contiene por una lista (&& o ||). 
 f)Modifique el script para que se muestre el promedio de notas 
   ingresadas, al finalizar la carga de alumnos. 
 g) Reemplace el uso de `` por su equivalente. 
  
  
#Inicio
#####################
#!/bin/bash

declare -i nota 
declare -u nombre 
declare -u apellido 
declare -u resp

temp=`tempfile` || temp=/tmp/listado.$$

function calificar (){
	echo -n "Nombre: $1, Apellido: $2," 
	if [[ $3 -lt 4 ]];then 
	   echo " DESAPROBADO"
	else
           echo " APROBADO"
	fi   
}

while true; do
	echo -n "Por favor ingrese Nombre: " 
	read nombre
	echo -n "Por favor ingrese Apellido: " 
	read apellido
	echo -n "Nota correspondiente a $nombre $apellido: " 
	read nota
	calificar $nombre $apellido $nota >> $temp
        
	resp="N"
	while [[ "$resp" != "S" ]];do 	
	  echo -n "¿Otro ingreso? S/N": 
	  read resp 
          if [[ "$resp" == "N" ]];then 
		break 2 
	  fi 
          echo
        done 	
done
cat $temp

rm $temp 
exit 0
# Fin del script

7. Sobre el script /usr/sbin/iptables-apply :
   a) ¿A qué paquete de software pertenece el script?
   b) Liste el nombre de todas las funciones del script. Para cada una
   de ellas, y sin entrar en detalles del total del script, intente 
   dar una breve descripción de su funcionalidad (Ayuda: lea la 
   página 73 del manual de referencia. El guión - que marca 
   el string delimitante de un here-document <<-StringDelimitante 
   suprime los tabs (pero no los espacios) en la salida). 
   Ejemplo: 
   c) Explique qué hace la sentencia case en las líneas 153 a 160. 

