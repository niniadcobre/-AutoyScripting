----------------------------------
TP04 - Automatización y scripting 
DEBUG
FAI - TUASSL  
----------------------------------

MANUAL DE REFERENCIA: "BEGINNING LINUX PROGRAMMING"
---------------------------------------------------
NOTA1: Los temas cubiertos en este práctico incluyen los
desarrollados en las páginas 74 y 75 del manual de referencia. 

NOTA2: Cuando los ejercicios pidan modificar código, repita
el bloque a continuación del original y haga las modificaciones.  

NOTA3: Cada vez que modifique el código VERIFIQUE su correcto 
funcionamiento.  

NOTA4: Cuando se pida modificar un script, todas las modificaciones
deben hacerse en simultáneo en la misma versión. 

NOTA5: EL uso de algún editor que coloree según la sintaxis suele 
ser de ayuda. En el caso de el editor vi, la opción syntax enable 
realiza esta función. 

EJERCITACIÓN:
---------------------------------
0. Indique al menos dos formas de invocar las opciones para trazado de
   scripts. 

1. Dado el siguiente script, utilizando la/s opción/es apropiada/s del 
shell (-x o -xv), observe la ejecución del script a continuación  y responda:
  a) ¿Se ejecutan las líneas anteriores al error de sintaxis? 
  b) ¿Se ejecutan las líneas posteriores al error de sintaxis? 
  c) ¿Es importante verificar la sintaxis de un script antes de 
     ejecutarlo? ¿Cómo puede hacerlo?
  d) Elimine los errores de sintaxis y verifique. 

#!/bin/bash
echo Haciendo algo terrible, como editar /etc/passwd
echo Haciendo algo terrible, como borrar archivos
if [[ -f /etc/passwd ];then echo Algo aún más terrible ;fi
echo Haciendo algo terrible, como editar /etc/shadow
# Fin del script 

2. Dado el siguiente script, utilizando la/s opción/es apropiada del 
shell (-x o -xv), observe la ejecución del script a continuación  y responda:
  a) ¿Existen errores de sintaxis en el script?¿Cómo lo puede verificar sin 
     ejecutar efectivamente el script?
  b) ¿Existen errores en ejecución?¿Qué error es?
  c) ¿Se ejecutan las líneas anteriores al error en ejecución?
  d) ¿Se ejecutan las lineas posteriores al error en ejecución?
  e) ¿Puede ser útil en esta situación la opción nounset (-u) de bash?
     Verifique lo qué sucede. ¿Alguna diferencia con no utilizar la opción?

#!/bin/bash
echo Haciendo algo terrible, como editar /etc/passwd
echo Haciendo algo terrible, como borrar archivos
if [ $nodef -ne 0  ];then echo Algo aún más terrible ;fi
echo Haciendo algo terrible, como editar /etc/shadow
# Fin del script 

2. Lea el script a continuación y complete los incisos listados: 
  a) Busque errores de sintaxis y elimine los mismos, sin ejecutar 
     efectivamente hasta en tanto no haya eliminado los errores. 
     Para cada error, copie aquí la línea y el error indicado por
     bash. Además indique la resolución. ¿La corrección fue aplicada 
     en la línea indicada por bash? 
     Utilice la opción apropiada de bash para lograrlo. 
  b) Para cada variable del script analice qué sucedería si dicha 
     variable quedase sin definir (es decir, no se le asigna valor 
     en ningún momento). Además indique si, dada la lógica del script,
     es posible que quede sin definir. En caso de ser posible, 
     indique cuál sería el impacto y qué haría para mejorar el script. 
      

#Inicio
#####################
#!/bin/bash

# El siguiente script emite cada 30 segundos un resumen de la 
# cantidad de procesos por usuario, ordenado de menor a mayor. 
# Dicho resumen se emite por pantalla y se guarda en un archivo
# temporal. 

declare -i procs total 
declare -r logfile=$(tempfile)
declare -r instante=$(tempfile)
declare -r temp=$(tempfile)


function total_proc (){ 
  echo $(grep "^$1 " $instante |wc -l)

echo COMIENZO | tee $logfile 

while :; do
     ps -ef --no-headers > $instante 
     total=0 
     date
     for usr in $(cut -f1 -d:  /etc/passwd);do 
	  procs=$(total_proc $usr)
	  if [ $procs -ne 0 ];then 
	    echo ${usr}: $procs
	    let total=total+procs
	  fi 
     done > $temp 
     sort -n -k2 $temp 
     echo "Total de procesos: $total
     sleep 30
done | tee $logfile 

#Limpieza
[[ -f $instante ] && rm $instante 
[[ -f $temp ]] && rm $temp 
echo $logfile debe ser borrado manualmente. 

exit 0
# Fin del script


3. Lea el script a continuación y complete los incisos listados: 
  a) Busque errores de sintaxis y elimine los mismos, sin ejecutar 
     efectivamente hasta en tanto no haya eliminado los errores. 
     Para cada error, copie aquí la línea y el error indicado por
     bash. Además indique la resolución. ¿La corrección fue aplicada 
     en la línea indicada por bash? 
     Utilice la opción apropiada de bash para lograrlo. 
  b) Para cada variable del script analice qué sucedería si dicha 
     variable quedase sin definir (es decir, no se le asigna valor 
     en ningún momento). Además indique si, dada la lógica del script,
     es posible que quede sin definir. En caso de ser posible, 
     indique cuál sería el impacto y qué haría para mejorar el script. 
  c) ¿Qué sucede si no existen archivos jpg en el/los directorios 
     pasados como argumento?¿Cómo podría mejorar esta sección del script?

#Inicio
#####################

# El siguiente script debe ser ejecutado por usuario no 
# administrador. Realiza copias de archivo finalizados en 
# jpg, eliminando esta extensión y reemplazándola por JPG. 
# El script trabaja sobre un conjunto de directorios obtenidos
# como argumento del script. 

#!/bin/bash

function es_root() {
local -u resp

if [[ $(id -u) -eq 0 ]] ;then
    while : ;do 
       echo "ADVERTENCIA: ud. es root, realmente desea continuar S/N"
       read resp
       case $resp in:
         S*) return ;
         N*) echo saliendo.. ; exit ;;
       esac 
    done 
 fi 
}

es_root
 
for dir; do
   if [[ -d $dir ]] then 
      cd $dir
      [[ ! -d JPG ]] && mkdir JPG 
      for i in $(ls *jpg);do
	cp -i $i JPG/${i%%jpg}JPG #Expansión de parámetro: remueve jpg del final de $i, agregando JPG.  
      cd $OLDPWD
   fi 
done 
# Fin del script

4. Lea el script a continuación y complete los incisos listados: 
  a) Busque errores de sintaxis y elimine los mismos, sin ejecutar 
     efectivamente hasta en tanto no haya eliminado los errores. 
     Para cada error, copie aquí la línea y el error indicado por
     bash. Además indique la resolución. ¿La corrección fue aplicada 
     en la línea indicada por bash? 
     Utilice la opción apropiada de bash para lograrlo. 
  b) Para cada variable del script analice qué sucedería si dicha 
     variable quedase sin definir (es decir, no se le asigna valor 
     en ningún momento). Además indique si, dada la lógica del script,
     es posible que quede sin definir. En caso de ser posible, 
     indique cuál sería el impacto y qué haría para mejorar el script. 
  c) ¿Está funcionando correctamente el script? Observe lo que sucede para un 
     sólo paquete (ejemplo a2ps). ¿Puede detectar cuál es el problema y corregirlo?
     ¿Se trata de un error de sintaxis?

#Inicio
#####################
#!/bin/bash 

# El objetivo del script es encontrar scripts escritos en bash 
# contenidos en paquetes instalados en el sistema. Asumiendo una 
# distribución debian o derivado. Se puede indicar un listado de 
# nombres de paquete, un archivo con una lista de nombres de paquete, 
# o bien si no se proveen argumentos se genera el listado para todos
# los paquetes instalados en el sistema. El listado será emitido por 
# la salida estándar. 

function buscarscript(){
local a
local -i total=0
   
   if ! dpkg -l $1 &> /dev/null; then
     echo "$1 no instalado"
     return 
   fi
   echo $1 
   for archivo in $(dpkg -L $1); do
      a=$(file "$archivo"|grep "Bourne-Again"|cut -f1 -d:)
      if [ -n $a ];then  
	echo "    $a"
        let total++
   done   
   return $total 
}

function todo_sistema(){
local -u resp 
   while :;do
     echo "Se creará un listado para todos los paquetes instalados en el sistema, ¿esta de acuerdo? S/N" 
     read resp 
     case $resp in
        S) return  
        N) echo saliendo...; exit ;; 
     esac
   done  
}

function no_es_root(){
local -u resp 
if [[ $(id -u) -ne 0 ]] ;then
    while : ;do 
       echo "ADVERTENCIA: ud. NO es root, realmente desea continuar? S/N'
       read resp
       case $resp in
         S*) return ;;
         N*) echo saliendo.. ; exit ;;
       esac 
    done 
 fi 
}

declare -i total=0 

no_es_root 

if [[ $# -eq 0 ]];then 
   #Crear listado para todos los paquetes del sistema 
   todo_sistema
   for pkg in $(dpkg -l |awk '$1=="ii" {print $2}'); do
      buscarscript $pkg
      let total=total+$?
   done 
elif [[ -f "$1"]];then
   # Si el primer argumento es un archivo regular, se asume que contiene una
   #lista de nombres de paquetes separada por nueva linea, sin lineas vacías. 
   for pkg in $(cat $1);do
      buscarscript $pkg 
      let total=total+$?
   done 
else
   #Asume que los argumentos son un listado de nombres de paquetes
   for pkg ;do
	buscarscript $pkg
        let total=total+$?
fi 
echo Total de scripts de bash encontrados: $total  
exit 0
# Fin del script
  
5. Lea el script a continuación y complete los incisos listados: 
  a) Busque errores de sintaxis y elimine los mismos, sin ejecutar 
     efectivamente hasta en tanto no haya eliminado los errores. 
     Para cada error, copie aquí la línea y el error indicado por
     bash. Además indique la resolución. ¿La corrección fue aplicada 
     en la línea indicada por bash? 
     Utilice la opción apropiada de bash para lograrlo. 
  b) Para cada variable del script analice qué sucedería si dicha 
     variable quedase sin definir (es decir, no se le asigna valor 
     en ningún momento). Además indique si, dada la lógica del script,
     es posible que quede sin definir. En caso de ser posible, 
     indique cuál sería el impacto y qué haría para mejorar el script. 
  c) ¿Qué sucede con el contenido del nombre, apellido y nota en caso 
     de que el usuario no ingrese valor? ¿Podría mejorar esta situación?
     
  
#Inicio
#####################
#!/bin/bash
# El siguiente script es utilizado por un usuario para ingresar 
# tuplas constituidas de: Nombre, Apellido y nota, correspondientes 
# a un alumno. Basado en cada tupla se emitirá, por la salida 
# estándar, el mismo listado pero con una nota alfabética basada 
# en la nota numérica ingresada. 


function carga_nota(){
  echo -n "Por favor ingrese Nombre: " 
  read nombre
  echo -n "Por favor ingrese Apellido: " 
  read apellido
  while : ;do 
     echo -n "Nota correspondiente a $nombre $apellido: " 
     read nota
     case $nota in 
     [0-9]|10) return ;;
     esac 
  done 
}

function otro_ingreso () {
  local -u resp 
  resp="N"
  while [[ "$resp" != "S" ]];do 	
    echo -n "¿Otro ingreso? S/N": 
    read resp 
    if [[ "$resp" == "N" ]];then 
       return 1
    fi 
  done 	
}

function calificar (){
  echo -n "Nombre: $1, Apellido: $2," 
  case $3 in
    0) echo REPROBADO ;;
    [1-3]) echo INSUFICIENTE ;; 
    4) echo APROBADO ;;
    [5-7]) echo BUENO;;
    [8-9) echo MUY BUENO;;
    10) echo EXCELENTE ;;  
    *) echo NOTA INVALIDA ;;
  esac 
}

declare -u nombre apellido 
declare -i otro=0 cont=0 prom=0
declare nota
declare -r temp=`tempfile || temp=/tmp/listado.$$

while [[ $otro -eq 0 ]]; do
  carga_nota   
  let prom=prom+nota
  let cont++
  calificar $nombre $apellido $nota >> $temp
  otro_ingreso 
  otro=$?
done

let prom=prom/cont
echo PROMEDIO DE NOTAS: $prom  >> $temp 

cat $temp
[[ -f $temp ]] && rm $temp 

exit 0
# Fin del script

6. Sobre el script /usr/sbin/iptables-apply : 
   a) Invocando el script en modo debug (bash -x o -xv), pase como argumento 
   la opción -h y observe la ejecución. 
   b) Invocando el script en modo debug (bash -x o -xv), pase como argumento 
   la opción --version y observe la ejecución. 
   c) ¿Qué opciones se ha/n configurado en el script, que permita/n 
   ayudar al correcto funcionamiento y capturar errores comunes?


7. Sobre el script internas.sh y módulos.sh 
   a) ¿Es visible la variable DEBUG en las funciones del archivo módulos.sh?
      ¿Qué cambios haría para que sea visible? ¿Para qué podría servir este 
      cambio?¿Cuál es el efecto de esta variable?
   b) Genere tres errores de sintaxis simultáneamente, y verifique cuál es 
      el/los error/s reportado/s por bash. Indique las líneas de error aquí. 
   c) ¿Al utilizar la opción -x ¿Se observa la ejecución interna de las 
      funciones o sólo se ve el llamado? 
   d) Observe la línea "source modulos.sh" ¿Qué sucede al ejecutar con -x y con 
      -v?
   e) Genere código que fuerce la acción de las opciones set -eu en el script.  
