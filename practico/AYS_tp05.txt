----------------------------------
TP05 - Automatización y scripting 
Herramientas: find, sed, grep, awk,
cron/at
FAI - TUASSL  
----------------------------------

MANUAL DE REFERENCIA: "BEGINNING LINUX PROGRAMMING"
---------------------------------------------------
NOTA1: Los temas cubiertos en este práctico incluyen los
desarrollados en las páginas 

NOTA2: Cuando los ejercicios pidan modificar código, repita
el bloque a continuación del original y haga las modificaciones.  

NOTA3: Cada vez que modifique el código VERIFIQUE su correcto 
funcionamiento.  

NOTA4: Cuando se pida modificar un script, todas las modificaciones
deben hacerse en simultáneo en la misma versión. 

EJERCITACIÓN:
---------------------------------

0. Comando find. En cada caso indique cuál es el directorio de búsqueda. 
Cuáles son las opciones que afectan toda la operación; las pruebas que 
afectan archivos individuales, y las acciones a realizar. ¿Es necesario 
ser root para ejecutar estos comandos? ¿Siempre será necesario?


  ####        #   ####
 #    #       #  #    #     EVALUAR LA SENTENCIA ANTES DE EJECUTAR
 #    #       #  #    #     PUEDE CAUSAR ESTRAGOS EN SU MAQUINA PERSONAL
 #    #       #  #    #
 #    #  #    #  #    #
  ####    ####    ####

 a) Indique el comando find que cumpla con lo pedido en cada búsqueda. 
     i) Busque archivos en todo el árbol de directorios tal que que 
        pertenezcan a root y tengan permisos 777. 
    ii) Busque archivos de dispositivos (bloques o carácter). 
   iii) Busque archivos regulares finalizados en jpg o JPG, ubicados dentro 
	del directorio home y, liste sus propiedades. 
    iv) Busque archivos que hayan sido modificados hace 1 día.
     v) Busque archivos en todo el árbol de directorios tal que:  
        pertenezcan a root y tengan permisos 777 y, sean scripts. 
    vi) Busque archivos en todo el árbol de directorios tal que:  
        pertenezcan a root; tengan setuid o setgid y, permisos 
        de escritura y lectura para todos, y no sean binarios (ELF). ¿Por qué 
        pueden ser interesantes estos archivos desde el punto de 
        vista de la seguridad?

 b) Describa el alcance de las siguientes búsquedas:
	 i) find . -mmin -5  -ls
	ii) find / -mount \( -nogroup -or -nouser \) -ok rm {} \;
       iii) find /home -size +2G -type f -delete 	
	iv) find /tmp -printf "%p %k %\n"
	 v) find / -type f -exec grep -l -m 1 '^#!/bin/bash' {} \;
            Más allá del formato, ¿qué diferencias encuentra entre el resultado 
            del comando anterior y findshell.sh?¿Qué sucede si la expresión regular
            se encuentra en una línea distinta de la primera? 
        
Expresiones regulares:  
----------------------
Una  expresión  regular  es  un  patrón que describe un conjunto de cadenas 
de caracteres. Las expresiones regulares se construyen de forma análoga a 
las expresiones aritméticas, combinando expresiones más pequeñas mediante 
ciertos operadores para formar expresiones complejas. -man grep- 

Las herramientas find, sed, grep, awk y perl utilizan expresiones regulares. 
Sin embargo, cada herramienta puede dar soporte a un cierto tipo de expresiones
regulares y no otros. En cada caso corresponderá analizar cuál es el tipo de
expresiones regulares soportadas y, utilizarlas en consecuencia. Por ejemplo 
en el caso de find, las expresiones regulares utilizadas de manera 
predeterminada son las mismas que provee el software emacs. Sin embargo 
find provee la opción regextype, que nos permite cambiar ese comportamiento, 
y utilizar por ejemplo las mismas expresiones regulares que egrep (grep -E).

El shell en sí mismo soporta expresiones regulares, ver man bash
(sección EXPANSIÓN, subsección Expansión de caminos, subsubsección
Patrones). 

Más información: 
http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html

1. Expresiones regulares:  
 a) Indique el alcance de las expresiones regulares en cada comando; y el 
    efecto logrado por el comando en general. Indique además cuál es el 
    programa que interpreta la expresión regular.  

     i) find / -xdev -regextype posix-egrep -iregex '(/usr)?/[s]?bin/.*'
    ii) find / -xdev | egrep '(/usr)?/[s]?bin/.*'
   iii) egrep -n  '\b(\w+)[ ]+\1\b' mitexto.txt
    iv) /sbin/ifconfig  | egrep '\b([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}\b'
     v) ls -d  *[[:digit:]]*

 b) Utilizando grep indique sentencias que cumplan con lo siguiente: 
     i) Encontrar números aislados de al menos 4 dígitos, es decir que no
        se encuentren concatenados a caracteres alfabéticos.
    ii) Encontrar una patrón que conforme una palabra completa, esto es
        que no sea sub-cadena.
   iii) Mostrar sólo la palabra coincidente con el patrón, no la línea 
        completa. 
    iv) Encontrar líneas vacías. 
     v) Encontrar en la base de datos de usuarios, aquellos que no tengan 
        un shell asignado.  
    vi) Encontrar en la base de datos de usuarios, aquellos que comiencen 
        con la letra m o M. 
   vii) Encontrar palabras de 5 caracteres que comiencen con m y terminen 
        con a (Usar /usr/share/dict/words para probar). 

2. Uso de awk.  
Awk es un lenguaje de programación orientado al procesamiento de patrones y 
textos. Permite soluciones más generales de las que podemos lograr con sed. 
Sin embargo, existen pocos scripts en el sistema totalmente escritos en este 
lenguaje. Su uso más frecuente es en pequeñas sentencias dentro de scripts
escritos en bash, sh, etc. 

 a) A continuación se indican varias sentencias awk extraídas de scripts del
    sistema (findshell |xargs grep awk ). Indique la función que realiza awk 
    en cada caso; y el efecto del comando en general. 
     i) swpf=$(free |tail|awk '{print $NF}'
    ii) SYSFS=$(mount |grep sysfs|awk {'print $3'})
   iii) ALSA_DRIVER_VERSION=`cat /proc/asound/version |head -n1|awk {'print $7'} |sed 's/\.$//'`
    iv) max_mem=`free | awk 'NR == 2 {fmem=int($2 / 1024); if (fmem < 4000) {print fmem} else {print 4000}}'`
     v) bridge=$(brctl show | awk 'NR==2 {print $1}')
    vi) RPMS=$(LANG=C cp -va ${temp_dir_name}/SRPMS/* $kmp_basedir | awk '{print $NF}')
     v) max_mem=`vmstat | awk 'NR == 3 {fmem=int($5 / 1024); if (fmem < 4000) {print fmem} else {print 4000}}'`
    vi) line=$(awk '{ print $1 " " $3 " " $2 }' /proc/self/uid_map)

 b) Compare la sentencia a continuación con el efecto del ejercicio 0.b)v)
    find / -type f -exec awk 'NR==1 && $1=="#!/bin/bash" {print FILENAME}' {} \;


3. Lea el script a continuación y complete los incisos listados: 
 a) Indique todos los usos de expresiones regulares en el script. En
    cada caso indique cuál es el programa que interpreta la expresión 
    regular y, el alcance de la misma.  
 b) ¿Podría reemplazar 'ls *jpg' con find? 
      
#Inicio
#####################

# El siguiente script debe ser ejecutado por usuario no 
# administrador. Realiza copias de archivo finalizados en 
# jpg, eliminando esta extensión y reemplazándola por JPG. 
# El script trabaja sobre un conjunto de directorios obtenidos
# como argumento del script. 

#!/bin/bash

function es_root() {
local resp
declare -u resp 

if [[ $(id -u) -eq 0 ]] ;then
    while : ;do 
       echo "ADVERTENCIA: ud. es root, realmente desea continuar? S/N"
       read resp
       case $resp in
         S*) return ;;
         N*) echo saliendo.. ; exit ;;
       esac 
    done 
 fi 
}

es_root
 
for dir; do
   if [[ -d $dir ]];then 
      cd $dir
      [[ ! -d JPG ]] && mkdir JPG 
      for i in $(ls *jpg);do
	cp -i $i JPG/${i%%jpg}JPG #Expansión de parámetro: remueve jpg del final  #de $i agregando.  
      done
      cd $OLDPWD
   fi 
done 

# Fin del script

4. Lea el script a continuación y complete los incisos listados: 
 a) Indique todos los usos de expresiones regulares en el script. En
    cada caso indique cuál es el programa que interpreta la expresión 
    regular y, el alcance de la misma.  
 b) Observe y documente cada uso de find, sed, awk y grep en el script. 

#Inicio
#####################
#!/bin/bash 

# El objetivo del script es encontrar scripts escritos en bash 
# contenidos en paquetes instalados en el sistema. Asumiendo una 
# distribución debian o derivado. Se puede indicar un listado de 
# nombres de paquete, un archivo con una lista de nombres de paquete, 
# o bien si no se proveen argumentos se genera el listado para todos
# los paquetes instalados en el sistema. 

declare -u resp
declare -i total=0 

function buscarscript(){
local a
local -i total=0
   
   if ! dpkg -l $1 &> /dev/null; then
     echo "$1 no instalado"
     return 
   fi
   echo $1 
   for archivo in $(dpkg -L $1); do
      a=$(file "$archivo"|grep "Bourne-Again"|cut -f1 -d:)
      if [[ -n $a ]];then  
	echo "    $a"
        let total++
      fi 
   done   
   return $total 
}

function todo_sistema(){
local -u resp 
   while :;do
     echo "Se creará un listado para todos los paquetes instalados en el sistema, ¿esta de acuerdo? S/N"
     read resp 
     case $resp in
        S) return ;; 
        N) echo saliendo...; exit ;; 
     esac
   done  
}

function no_es_root(){
local -u resp 
if [[ $(id -u) -ne 0 ]] ;then
    while : ;do 
       echo "DVERTENCIA: ud. NO es root, realmente desea continuar? S/N"
       read resp
       case $resp in
         S*) return ;;
         N*) echo saliendo.. ; exit ;;
       esac 
    done 
fi 
}

no_es_root 

if [[ $# -eq 0 ]];then 
   #Crear listado para todos los paquetes del sistema 
   todo_sistema
   for pkg in $(dpkg -l |awk '$1=="ii" {print $2}'); do
      buscarscript $pkg
      let total=total+$?
   done 
elif [[ -f "$1" ]];then
   # Si el primer argumento es un archivo regular, se asume que contiene una
   #lista de nombres de paquetes separada por nueva linea, sin lineas vacías. 
   for pkg in $(cat $1);do
      buscarscript $pkg 
      let total=total+$?
   done 
else
   #Asume que los argumentos son un listado de nombres de paquetes
   for pkg ;do
	buscarscript $pkg
        let total=total+$?
   done 
fi 
echo Total de scripts de bash encontrados: $total  
exit 0

5. Dado el siguiente comando: 
   find /usr/bin /bin /sbin /usr/sbin  -type f -exec egrep -l -w '^#!/bin/bash|^#!/bin/sh' {} \; |xargs egrep -l -w 'awk|grep|find|sed'
   a) ¿Qué obtenemos a partir del siguiente comando? 
   b) ¿Encuentra algún programa que haya utilizado en el listado obtenido?
   c) Usando el listado obtenido, analice e indique 2 ejemplos de uso de sed, awk, grep y find.  
   d) ¿Puede modificar el comando tal que se encuentren scripts en bash o sh que contengan llamadas al intérprete perl? 

Cron/at: 
--------
6. Agregue una línea en el crontab de root tal que ejecute todos los días 
cada 10 minutos el script del ejercicio anterior, pero cuya 
salida sea guardada en el archivo /var/log/usuarios_presentes. Dicho archivo 
debe ser acumulativo, esto es, no debe ser sobrescrito con 
cada ejecución. Observe que en este caso ya no será necesario el ciclo 
infinito, pues cron se encarga de la ejecución periódica. ¿Por qué utilizamos
el cron de root y no el de cualquier usuario como en el ejercicio anterior? 


7. Ud es un administrador precavido y sabe que hoy a las 18hs alguien mas va 
a implementar cambios en la configuración del sistema. Por ende decide que un
rato antes de que suceda, quisiera realizar un backup del directorio de 
configuración de sistema en el home de root, sin embargo, le ha surgido una 
cita importante que le impide realizarlo alrededor de las 17hs. Utilice el 
comando at para planificar la tarea. 


8. Indique cómo sería la planificación por crontab para los siguientes casos:
	a) Todos los viernes del mes de diciembre
	b) Cada 3 días
	c) El primer día de cada mes. 
	d) De las 18h a las 22hs.
	e) En los minutos 0 a 14 y 24 a 35, de las 0hs,7hs y23hs, los días 
	     miércoles.
	f) Una vez por año
	 

9. Indique expresiones válidas para indicar a at que comience:
	a) dentro de 5 minutos
	b) dentro de 3 días 
	c) A las 18:23hs 
	d) A las 4 de la tarde. 
